extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace ${1:name}
{

$0

}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet stdvector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet ifd "Include header guard"
#ifndef `!p snip.rv = fn.replace(".","_").upper()`
#define `!p snip.rv = fn.replace(".","_").upper()`

$0

#endif
endsnippet

snippet cls
class ${1:name} 
{
public:
    $1();
    virtual ~$1();

    $0

private:
    // copy constructor
    $1 (const $1& rhs);
    $1& operator= (const $1& rhs);

    ${2:/* TODO: members */}
};
endsnippet

snippet fni "function implementation"
${1:void} ${2:class}::${3:function}(${4:argument})
{
    ${5:/*code*/}
}
endsnippet

snippet fnic "const function implementation"
${1:void} ${2:class}::${3:function}(${4:argument}) const
{
    ${5:/*code*/}
}
endsnippet

snippet fn "function declaration"
${1:void} ${2:function}(${4:argument});
endsnippet

snippet fnc "const function declaration"
${1:void} ${2:function}(${4:argument}) const;
endsnippet

snippet cae "CPPUNIT_ASSERT_EQUAL"
CPPUNIT_ASSERT_EQUAL(${1:expression}, ${2:target});
endsnippet

snippet ca "CPPUNIT_ASSERT"
CPPUNIT_ASSERT(${1:left} ${2:==} ${3:right});
endsnippet

snippet in "#include <header.hpp>"
#include <${1:header}.hpp>
endsnippet

snippet foriter "for loop iterator form"
${1:container_type}::iterator iter = ${2:container}.begin();
for (; iter != $2.end(); ++iter)
{
    $0
}
endsnippet

snippet stc "static const variable"
static const ${1:type} ${2:name};
endsnippet

snippet as "ASSERT(xxxx)"
ASSERT(${1:condition});
endsnippet

snippet asp "ASSERT(pointer != NULL)"
ASSERT(${1:pointer} != NULL);

if (!$1)
{
    $0
}

endsnippet

snippet tc "new test cases(not test function)"
// ${1:desc}
{
    $0
}
endsnippet

snippet vector "UIVector"
UIVector<${1:int}> ${2:myVector};
endsnippet

snippet iter "get an iterator"
${1:container_type}::iterator iter = ${2:container}.${3:begin()};
endsnippet

snippet dlink "add xml snippet to link the design doc"
// <?xml version="1.0">
// <component name="${1:component}">
//     <design document="D270-${2:design doc number}"/>
// </component>
// <?xmlend>
endsnippet

snippet todo "add todo"
// TODO:: ${1:description}
endsnippet

snippet b "start a block" i

{
    ${1:/*code*/}
}
endsnippet

# vim:ft=snippets:
