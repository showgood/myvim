extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet ifd
#ifndef `!p snip.rv = snip.basename.upper()+'_'+snip.ft.upper()`
#define `!p snip.rv = snip.basename.upper()+'_'+snip.ft.upper()`
    ${1:/* code */}
#endif
endsnippet

snippet cls
	class ${1:name} 
	{
	public:
		$1();
		virtual ~$1();

		// copy constructor
		$1 (const $1& rhs);
		$1& operator= (const $1& rhs);

	private:
		${2:/* TODO: members */}
	};
endsnippet

snippet fn
${1:void} ${2:class}::${3:function}(${4:argument})
{
    ${5:/*code*/}
}
endsnippet

snippet cae
CPPUNIT_ASSERT_EQUAL(${1:expression}, ${2:target});
endsnippet

snippet ca
CPPUNIT_ASSERT(${1:left} ${2:==} ${3:right});
endsnippet

# vim:ft=snippets:
